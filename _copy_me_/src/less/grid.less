._gen-columns(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth, @iteration: 1) when (@iteration =< 12) {
  @suffixStr: ~"@{suffix}";
  .col@{suffixStr}-@{iteration}, .col@{suffixStr}-@{iteration}-breakout-none {
    width: @columnWidth * @iteration + @columnGutterWidth * (@iteration - 1);
    margin-left: @columnGutterWidth;
    margin-right: 0px;
    box-sizing: border-box;
  }
  .col@{suffixStr}-@{iteration}-high {
    height: @columnWidth * @iteration + @columnGutterWidth * (@iteration - 1);
  }
  .col@{suffixStr}-@{iteration}-breakout-left {
    width: @columnWidth * @iteration + @columnGutterWidth * (@iteration - 1) + @wrapperPaddingWidth;
    margin-left: -@wrapperPaddingWidth;
    box-sizing: border-box;
  }
  .col@{suffixStr}-@{iteration}-breakout-right {
    width: @columnWidth * @iteration + @columnGutterWidth * (@iteration - 1) + @wrapperPaddingWidth;
    margin-right: -@wrapperPaddingWidth;
    box-sizing: border-box;
  }
  .col@{suffixStr}-@{iteration}-breakout-both {
    width: @columnWidth * @iteration + @columnGutterWidth * (@iteration - 1) + @columnGutterWidth * 2;
    margin-left: 0;
    margin-right: 0;
    box-sizing: border-box;
  }
  .text-col@{suffixStr}-@{iteration} {
    -webkit-column-count: @iteration;
    -moz-column-count: @iteration;
    column-count: @iteration;
  }
  ._gen-columns(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth, @iteration + 1);
}

._gen-columns-push(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth, @iteration: 0) when (@iteration =< 12) {
  @suffixStr: ~"@{suffix}";
  .col@{suffixStr}-push-@{iteration} {
    left: @columnWidth * @iteration + @columnGutterWidth * @iteration;
  }
  ._gen-columns-push(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth, @iteration + 1);
}

._gen-columns-pull(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth, @iteration: 0) when (@iteration =< 12) {
  @suffixStr: ~"@{suffix}";
  .col@{suffixStr}-pull-@{iteration} {
    left: -(@columnWidth * @iteration + @columnGutterWidth * @iteration);
  }
  ._gen-columns-pull(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth, @iteration + 1);
}

/* Generate the row class plus column def */
._gen-row(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth) {
  @suffixStr: ~"@{suffix}";
  .row {
    clear: both;
    box-sizing: border-box;
    margin-left: -@columnGutterWidth;
    
    &::after, &::before {
      display: block;
      clear: both;
      content: " ";
    }
    
    &:after, &:before {
      display: block;
      clear: both;
      content: " ";
    }
    
    & > .col@{suffixStr}-break {
      clear: both;
    }
    
    &.row@{suffixStr}-no-wrap {
      white-space: nowrap;
      font-size: 1px;
      
      > * {
        display: inline-block;
        white-space: normal;
        vertical-align: top;
        float: none;
        font-size: 1rem;
      }
    }
    
    > * {
      position: relative;
      float: left;
    }
    
  }
    
  ._gen-columns(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth);
  ._gen-columns-push(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth);
  ._gen-columns-pull(@suffix, @columnWidth, @columnGutterWidth, @wrapperPaddingWidth);
}

* {
    -webkit-column-gap: inherit;
    -moz-column-gap: inherit;
    column-gap: inherit;
}

/* A pixel based grid */
._gen-grid(@suffix, @wrapperWidth, @columnGutterWidth, @wrapperPadding) when (ispercentage(@wrapperWidth) = false) {

  @columnWidth: ((@wrapperWidth - ( 11 * @columnGutterWidth)) / 12);
  
  .wrapper {
    width: @wrapperWidth + @wrapperPadding * 2;
    margin: auto;
    padding-left: @wrapperPadding;
    padding-right: @wrapperPadding;
    box-sizing: border-box;
    
    * {
      -webkit-column-gap: @columnGutterWidth;
      -moz-column-gap: @columnGutterWidth;
      column-gap: @columnGutterWidth;
    }
  }
  
  .faux-row {
    position: relative;
    width: @wrapperWidth;
    margin: auto;
  }
  
  .faux-row-inset {
    position: relative;
    width: @wrapperWidth - @columnGutterWidth * 2;
    margin: auto;
  }
  
  .faux-row-positioned-left-inset {
    position: absolute;
    left: 50%;
    margin-left: -@wrapperWidth/2;
  }
  
  .faux-row-positioned-right-inset {
    position: absolute;
    right: 50%;
    margin-right: -@wrapperWidth/2;
  }
  
  .faux-row-positioned-left {
    position: absolute;
    left: 50%;
    margin-left: -@wrapperWidth/2 - @columnGutterWidth;
  }
  
  .faux-row-positioned-right {
    position: absolute;
    right: 50%;
    margin-right: -@wrapperWidth/2 - @columnGutterWidth;
  }
  
  ._gen-row(@suffix, @columnWidth, @columnGutterWidth, @wrapperPadding);
  
}

/* A percentage based grid */
._gen-grid(@suffix, @wrapperWidth, @columnGutterWidth, @wrapperPadding) when (ispercentage(@wrapperWidth) = true) {

  @columnWidth: ((@wrapperWidth - @wrapperPadding * 2 - ( 11 * @columnGutterWidth)) / 12);
  
  .wrapper {
    width: unit(@wrapperWidth, vw);
    margin: auto;
    padding-left: unit(@wrapperPadding, vw);
    padding-right: unit(@wrapperPadding, vw);
    box-sizing: border-box;
    
    * {
      -webkit-column-gap: unit(@columnGutterWidth, vw);
      -moz-column-gap: unit(@columnGutterWidth, vw);
      column-gap: unit(@columnGutterWidth, vw);
    }
  }
  
  .grid-gutter-left {
    left: @columnGutterWidth;
  }
  
  .grid-gutter-right {
    riught: @columnGutterWidth;
  }
  
  .faux-row {
    position: relative;
    width: unit(@wrapperWidth, vw);
    margin: auto;
  }
  
  .faux-row-inset {
    position: relative;
    width: unit(@wrapperWidth - @wrapperPadding * 2, vw);
    margin: auto;
  }
  
  .faux-row-positioned-left-inset {
    position: absolute;
    left: 0px;
    margin-left: unit(@wrapperPadding, vw);
  }
  
  .faux-row-positioned-right-inset {
    position: absolute;
    right: 0px;
    margin-right: unit(@wrapperPadding, vw);
  }
  
  .faux-row-positioned-left {
    position: absolute;
    left: 0px;
    margin-left: unit(@wrapperPadding - @columnGutterWidth, vw);
  }
  
  .faux-row-positioned-right {
    position: absolute;
    right: 0px;
    margin-right: unit(@wrapperPadding - @columnGutterWidth, vw);
  }
  
  ._gen-row(@suffix, unit(@columnWidth, vw), unit(@columnGutterWidth, vw), unit(@wrapperPadding, vw));
  
}

/* Generate classes which hide named columns */
._gen-hidecols(@name) {
  @prefix: ~"@{name}";
  
  .visible-@{prefix} {
    display: none;
  }
}

/* Generate classes which hide named columns */
._gen-showcols(@name) {
  @prefix: ~"@{name}";
  
  .visible-@{prefix} {
    display: block;
  }
  
  .hidden-@{prefix} {
    display: none;
  }
}

/*
  Generate a non-named grid with the given properties
*/
.generate-grid(@wrapperWidth, @columnGutterWidth: 0px, @wrapperPadding: 0px) {
  
  .hidden {
    display: none;
  }
  
  ._gen-grid("", @wrapperWidth, @columnGutterWidth, @wrapperPadding);
  
}

/*
  Generate a named grid with the given properties
*/
.generate-named-grid(@name, @wrapperWidth, @columnGutterWidth, @wrapperPadding) {
  
  ._gen-grid("-@{name}", @wrapperWidth, @columnGutterWidth, @wrapperPadding);
  
}

/*
  Generate a non-named grid, wrapped in a media query
*/
.generate-media-grid(@mediaDef, @wrapperWidth, @columnGutterWidth, @wrapperPadding) {
  @media @mediaDef {
    ._gen-grid("", @wrapperWidth, @columnGutterWidth, @wrapperPadding);
  }
}

/*
  Generate a named grid, wrapped in a media query
*/
.generate-named-media-grid(@name, @mediaDef, @wrapperWidth, @columnGutterWidth, @wrapperPadding) {
  
  @media @mediaDef {
    .generate-grid(@wrapperWidth, @columnGutterWidth, @wrapperPadding);
    .generate-named-grid(@name, @wrapperWidth, @columnGutterWidth, @wrapperPadding);
    ._gen-showcols(@name);
  }
  
}